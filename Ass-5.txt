Ass-5

1. Write a C program which creates a child process which catches a signal sighup, sigint
and sigquit. The Parent process send a sighup or sigint signal after every 3 seconds, at
the end of 30 second parent send sigquit signal to child and child terminates by
displaying message "Parent Process has killed child process!!!‚Äù.

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

void childSignalHandler(int signum) {
    if (signum == SIGHUP) {
        printf("Child: Received SIGHUP signal from parent\n");
    } else if (signum == SIGINT) {
        printf("Child: Received SIGINT signal from parent\n");
    } else if (signum == SIGQUIT) {
        printf("child: My DADDY has killed me !!!\n");
        exit(0);
    }
}

int main() {
    pid_t child_pid;

    if ((child_pid = fork()) == 0) {
    
        signal(SIGHUP, childSignalHandler);
        signal(SIGINT, childSignalHandler);
        signal(SIGQUIT, childSignalHandler);

        while (1) {
         
            sleep(1);
        }
    } else if (child_pid > 0) {
       
        int count = 0;

        while (count < 6) {
            sleep(1);
            if (count < 5) {
                kill(child_pid, SIGHUP); 
            } else {
                kill(child_pid, SIGQUIT); 
            }
            count++;
        }
    } else {
        perror("fork");
        exit(1);
    }

    return 0;
}





2). Write a C program that illustrates suspending and resuming processes using signals.

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

int is_suspended = 0;

void signalHandler(int signum) {
    if (signum == SIGTSTP) {
        if (is_suspended) {
            printf("Child process resumed.\n");
            is_suspended = 0;
        } else {
            printf("Child process suspended.\n");
            is_suspended = 1;
        }
    }
}

int main() {
    pid_t child_pid;

    if ((child_pid = fork()) == 0) {
        
        signal(SIGTSTP, signalHandler); 
        signal(SIGCONT, signalHandler); 

        while (1) {
           
            sleep(1);
        }
    } else if (child_pid > 0) {
        
        printf("Parent process started. \n Child PID: %d\n", child_pid);

      
        sleep(2);

        while (1) {
            
            kill(child_pid, SIGTSTP);
            sleep(2);

            
            kill(child_pid, SIGCONT);
            sleep(2);
        }
    } else {
        perror("fork");
        exit(1);
    }

    return 0;
}
