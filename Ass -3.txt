Ass -3

1. Write a program to create ‘n’ children. When the children will terminate,
display total cumulative time children spent in user and kernel mode


#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <sys/resource.h>

int main() {
    int n, i;
    pid_t pid;
    struct rusage usage;
    long total_utime_sec = 0, total_utime_usec = 0;
    long total_stime_sec = 0, total_stime_usec = 0;

    
    printf("Enter the number of children to create: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        pid = fork();

        if (pid < 0) {
       
            perror("fork failed");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            
            printf("Child %d with PID %d is running\n", i+1, getpid());
            sleep(1); 
            exit(EXIT_SUCCESS); 
        }
    }

    
    for (i = 0; i < n; i++) {
        wait(NULL); 
        getrusage(RUSAGE_CHILDREN, &usage); 

        
        total_utime_sec += usage.ru_utime.tv_sec;
        total_utime_usec += usage.ru_utime.tv_usec;
        
        if (total_utime_usec >= 1000000) {
            total_utime_sec += 1;
            total_utime_usec -= 1000000;
        }

       
        total_stime_sec += usage.ru_stime.tv_sec;
        total_stime_usec += usage.ru_stime.tv_usec;
        
        if (total_stime_usec >= 1000000) {
            total_stime_sec += 1;
            total_stime_usec -= 1000000;
        }
    }

   
    printf("Total user mode time: %ld.%06ld seconds\n", total_utime_sec, total_utime_usec);
    printf("Total kernel mode time: %ld.%06ld seconds\n", total_stime_sec, total_stime_usec);

    return 0;
}



2)Write a program to demonstrate the use of atexit() function

#include <stdio.h>
#include <stdlib.h>

FILE *file;

void close_file() {
    if (file) {
        fclose(file);
        printf("File closed.\n");
    }
}

int main() {
    file = fopen("output.txt", "w");
    if (!file) {
        perror("Failed to open file");
        return 1;
    }

    atexit(close_file);  
   
    fprintf(file, "Hello, Tejal!\n");

    printf("Program is exiting...\n");
    return 0;
}


3)Write a program to handle the two-way communication between parent and
child using pipe

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main() {
    int pipe1[2]; 
    int pipe2[2]; 
    pid_t pid;
    char parent_msg[] = "Hello from parent!";
    char child_msg[] = "Hello from child!";
    char buffer[100];

    
    if (pipe(pipe1) == -1) {
        perror("pipe1 failed");
        exit(EXIT_FAILURE);
    }

    if (pipe(pipe2) == -1) {
        perror("pipe2 failed");
        exit(EXIT_FAILURE);
    }

    pid = fork(); 

    if (pid < 0) {
        perror("fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
       
        close(pipe1[1]); 
        close(pipe2[0]); 

        read(pipe1[0], buffer, sizeof(buffer));
        printf("Child received: %s\n", buffer);

        write(pipe2[1], child_msg, strlen(child_msg) + 1);

        close(pipe1[0]); 
        close(pipe2[1]); 
    } else {
      
        close(pipe1[0]); 
        close(pipe2[1]); 

        write(pipe1[1], parent_msg, strlen(parent_msg) + 1);

        read(pipe2[0], buffer, sizeof(buffer));
        printf("Parent received: %s\n", buffer);

        close(pipe1[1]); 
        close(pipe2[0]); 

        wait(NULL); 
    }

    return 0;
}